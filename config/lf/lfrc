# lf settings
# ======================================

set shell bash
set shellopts '-euo --pipefail'
set ifs "\n"

set hidden on
set scrolloff 4
set tabstop 8
set smartcase
set dircounts
set info size
set sortby natural
set ratios '1:2:3'
set timefmt '2006-01-02 15:04:05.000000000 -0700'
set previewer ~/.config/lf/preview

# keyboard mappings
# ---

# open machanisms
map <enter> open
map E &$OPENER $f
map o $mimeopen --ask $f
map O $mimeopen --ask-default $f

# General
map u !du -hsx * | sort -rh | less

# If you want to jump to a file or directory in lf using fuzzy matching,
# you can utilize fzf for this purpose:
map f $lf -remote "send $id select $(fzf)"

map i $LESS='-iWQMXR~' bat --paging=always --theme=TwoDark "$f"

map I !gstat $f || stat $f; echo ; du -sh $f ; echo ; file -I -b -p $f
map <esc> unselect; clear

map sn :{{ set sortby natural; set info size; }}

map zz push :z<space>

map gn &tmux split-window -v lf
# TODO
# map gt &tmux
# map gT &tmux

# show documentation (overrides 'search-back' command)
map ? $lf -doc | less

# file trash, paste and rename
map p paste
map D trash
map r $lf -remote "send $id push :rename<space>'$(basename $f | sed 's/ /<space>/g')'<left>"
map R push :rename<space>

# create directory/file
map ad push $mkdir<space>
map af push $touch<space>

# beyond compare selected files/directories
map = &bcompare $fx

# execute current file (must be executable)
map x $$f
map X !$f

# movements
cmap <up> cmd-history-prev
cmap <down> cmd-history-next
cmap <c-b> cmd-word-back
# waiting for https://github.com/gokcehan/lf/issues/111
# cmap <c-right> cmd-word
# cmap <c-left> cmd-word-back

# directory aliases
map gc cd ~/.config
map gp cd ~/projects
map gdl cd ~/Downloads
map ge cd /etc
map gm cd /mnt
map go cd /opt
map g/ cd /
map g~ cd ~
map ~ cd ~

# commands
# ---

cmd rename %[ -e $1 ] && printf "file exists" || mv "$f" "$1"
cmd mkdir %[ -n "${1}" ] && mkdir ${1} || echo "Argument needed"
cmd mkfile %[ -n "${1}" ] && touch ${1} || echo "Argument needed"
cmd trash %set -f; mv -f $fx ~/.trash
${{ mkdir -p ~/.trash }}

# replace open command with robust selection of openers
cmd open ${{
	case $(file --dereference --mime-type $f -b) in
		inode/x-empty) $EDITOR $fx ;;
		text/*) $EDITOR $fx;;
		video/*) nohup mpv $fx > /dev/null & ;;
		audio/*) nohup mpv $fx > /dev/null & ;;
		application/epub+zip) nohup FBReader $f > /dev/null & ;;
		application/pdf) nohup zathura $f > /dev/null & ;;
		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
	esac
}}

# delete current file or selected files (prompting)
cmd delete ${{
	set -f
	printf "$fx\n"
	printf "Delete items? [y/n]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

# replace paste command with rsync and progress display
cmd paste &{{
	load=$(lf -remote 'load')
	mode=$(echo "$load" | sed -n '1p')
	list=$(echo "$load" | sed '1d')
	if [ $mode = 'copy' ]; then
		rsync -avh --ignore-existing --progress $list . \
			| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
			| while read line; do
				echo "$line"
				lf -remote "send $id echo $line"
			done
	elif [ $mode = 'move' ]; then
		mv -n $list .
	fi
	lf -remote 'send load'
	lf -remote 'send clear'
}}

# quickly cd into frecent directories using github.com/rupa/z
cmd z ${{
	set +u
	source /usr/local/etc/profile.d/z.sh
	if [ "$?" = "0" ]; then
		dir="$(_z "$1" && pwd)"
		lf -remote "send $id cd $dir"
		lf -remote "send $id echo $dir"
	fi
}}

# dynamically set info displayed based on the number of columns
cmd recol %{{
	w=$(tput cols)
	if [ $w -le 60 ]; then
		lf -remote "send $id set ratios 1"
		lf -remote "send $id set nopreview"
	elif [ $w -le 80 ]; then
		lf -remote "send $id set ratios 1:2"
	elif [ $w -le 160 ]; then
		lf -remote "send $id set ratios 1:2:3"
	else
		lf -remote "send $id set ratios 1:2:3:5"
	fi
	lf -remote "send $id echo 'ui adjusted for width of $w'"
}}
