#--------------------------------------------------------
# TMUX shims
# https://superuser.com/questions/1069902/tmux-configuration-stanzas-based-on-tmux-version
# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

#--------------------------------------------------------
# General
#--------------------------------------------------------
set -g default-shell "${SHELL}"
set -g default-terminal "${TERM}"

# set window title string
#  #H  Hostname of local host
#  #I  Current window index
#  #P  Current pane index
#  #S  Session name
#  #T  Current window title
#  #W  Current window name
#  #   A literal ‘#’
set -g set-titles on
set -g set-titles-string '#T #S:#I.#P #W'

setw -g automatic-rename on

# This will generate xterm style function key sequences included to indicate
# modifiers such as Shift, Alt or Ctrl.
setw -g xterm-keys on

# Always honor extended keys, fixes Alacritty mods.
set-option -s -a extended-keys always

# Enable cursor shape modification in vim without Ptmux wrap
# See https://github.com/neovim/neovim/wiki/FAQ
set-option -s -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Enable 24-bit color support (check if this works via `tmux info | grep Tc`)
set-option -s -a terminal-overrides ",*:Tc"

# Add Undercurl (test it with `printf '\e[4:3mUndercurl\n\e[0m'`)
set-option -s -a terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Add colored undercurl (test it with `printf '\e[4:3;58:2:255:100:0mUndercurl\n\e[0m'`)
set-option -s -a terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# scrollback buffer size increase
set -g history-limit 50000

# Limit buffer stack
set -g buffer-limit 20

# Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# tmux messages are displayed for 2 seconds
set -g display-time 2000

# Allow the arrow key to be used immediately after changing windows, default is 500
set -g repeat-time 300

# focus events enabled for terminals that support them
set -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Start windows and panes from 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows automatically.
set -g renumber-windows on

# Visual notifications
set -g visual-bell off
set -g visual-activity off
set -g visual-silence off

# Window Monitoring
setw -g monitor-activity on
setw -g monitor-silence 0


#--------------------------------------------------------
# hooks
#--------------------------------------------------------
# Renumber sessions
set-hook -g session-created "run-shell ${XDG_CONFIG_HOME}/tmux/bin/renumber-sessions"
set-hook -g session-closed "run-shell ${XDG_CONFIG_HOME}/tmux/bin/renumber-sessions"


#--------------------------------------------------------
# keybindings
#--------------------------------------------------------
# set ` (tic) as the default prefix key combination
# and unbind C-b to free it up
unbind C-b
set -g prefix `

# use send-prefix to pass ` (tic) through to application
bind-key ` send-prefix

# Help screen: rebind list-keys window into a new pane
bind-key ? split-window -h 'exec tmux list-keys | less'

# Create new session
bind-key N new-session

# Link window from different session/window
bind L command-prompt -p "Link window from (session:window):" "link-window -s %% -a"

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with:" \
  "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Window monitoring for activity and silence
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
  'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
  'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Kill a session
bind-key D choose-tree -sf "kill-session -t '%%'"

# Use v and g for splitting from current path
unbind-key %
unbind-key '"'
bind-key g split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# Session navigation
bind-key n switch-client -n
bind-key p switch-client -p

# Window navigation with Meta+h/l/left/right
bind-key -n M-h previous-window
bind-key -n M-l next-window
bind-key -n M-Left previous-window
bind-key -n M-Right next-window

# Window Re-order
bind-key -n M-< swap-window -d -t -1
bind-key -n M-> swap-window -d -t +1

# Pane navigation
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Smart pane switching with awareness of vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Bring back clear screen under tmux prefix
bind-key C-h send-keys 'C-h'
bind-key C-j send-keys 'C-j'
bind-key C-k send-keys 'C-k'
bind-key C-l send-keys 'C-l'

# Toggle synchronized input to all panes in current window
bind-key S setw synchronize-panes

# Quick layout shortcuts
bind-key b setw main-pane-width 90\; select-layout main-vertical
bind-key B setw main-pane-height 30\; select-layout main-horizontal

# Use a tick for renaming the window prompt
bind-key r command-prompt -I '#W' -p '(rename window)' "rename-window '%%'"
bind-key R command-prompt -I '#S' -p '(rename session)' "rename-session '%%'"

# Reload tmux conf
bind-key C-r source-file $XDG_CONFIG_HOME/tmux/config \; display "Config reloaded"

# Open a man page in new vertical pane
bind-key / command-prompt -p 'Man>' "split-window -d -v 'exec man %%'"

# Use Facebook PathPicker to select paths from buffer interactively
# bind-key f capture-pane \; \
#  save-buffer $TMUX_TMPDIR/tmux-buffer \; \
#  new-window -c "#{pane_current_path}" \
#  "sh -c 'cat $TMUX_TMPDIR/tmux-buffer | fpp -c \"vim -O\" && rm $TMUX_TMPDIR/tmux-buffer'"

# # Use urlscan for displaying all links from buffer
# bind-key u capture-pane -J \; \
#   save-buffer $TMUX_TMPDIR/tmux-buffer \; \
#   split-window -l 10 "urlscan -c -d '$TMUX_TMPDIR/tmux-buffer' && rm $TMUX_TMPDIR/tmux-buffer"

# Use urlview for displaying all links from buffer
bind-key u capture-pane -J \; save-buffer $TMUX_TMPDIR/tmux-buffer \; split-window -l 10 "urlview '$TMUX_TMPDIR/tmux-buffer' && rm $TMUX_TMPDIR/tmux-buffer"

# Quick view of processes
bind-key P split-window -h 'exec htop'

# Help screen: rebind list-keys window into a new pane
bind-key ? split-window -h 'exec tmux list-keys | less'

# Force a reload of the config file
bind-key C-r source-file $XDG_CONFIG_HOME/tmux/config \; display "Config reloaded"

bind-key * list-clients

# Search for previous error
bind-key e copy-mode \; send-keys "?error" C-m

# Disable Ctrl+Arrows to maintain word jump
unbind-key -n C-Left
unbind-key -n C-Right
unbind-key -n C-Up
unbind-key -n C-Down

#--------------------------------------------------------
# Control
#--------------------------------------------------------
# bind vi key-mapping
set -g status-keys vi

# vi-style controls for copy mode
setw -g mode-keys vi

# Allows scrolling and selecting in copy-mode
set -g -q mouse on

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

# use bracketed paste, if the running application (vim/emacs/weechat) has
# sent the terminal code to enable it.
bind-key ] paste-buffer -p

# Trigger copy mode by Cmd-Up
# bind -n M-Up copy-mode

# Setup copy-mode vi bindings
# $ tmux -f /dev/null list-keys -T copy-mode-vi
unbind -Tcopy-mode-vi Enter
bind-key Escape copy-mode
bind-key -Tcopy-mode-vi v send -X begin-selection
bind-key -Tcopy-mode-vi V send -X select-line
bind-key -Tcopy-mode-vi C-v send -X rectangle-toggle
bind-key -Tcopy-mode-vi Escape send -X clear-selection

# Yank
# bind -T copy-mode-vi D send-keys -X copy-end-of-line
if-shell 'test "$(uname -s)" = Darwin' {
  %hidden yank="pbcopy"
  bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
}
if-shell 'which xclip' {
  %hidden yank="xclip -i -selection clipboard"
  bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
}

# Rotate key-bindings to inner/remote tmux session
# See https://github.com/tmux/tmux/issues/237
unbind-key C-o # rotate-window
bind-key C-o  \
  set prefix None \;\
  set key-table off \;\
  set window-status-current-style "bg=colour254" \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind-key -T off C-o \
  set -u prefix \;\
  set -u key-table \;\
  set -u window-status-current-style \;\
  refresh-client -S

# bind-key a set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

#--------------------------------------------------------
# Theme
#--------------------------------------------------------
set -g status on
set -g status-position top
set -g status-justify left

set -g status-keys vi

# refresh 'status-left' and 'status-right' more often
set -g status-interval 3

#---------------------------------------
# Theme
# SOLARIZED TERMCOL
# base03    brightblack
# base02    black
# base01    brightgreen
# base00    brightyellow
# base0     brightblue
# base1     brightcyan
# base2     white
# base3     brightwhite
# yellow    yellow
# orange    brightred
# red       red
# magenta   magenta
# violet    brightmagenta
# blue      blue
# cyan      cyan
# green     green
#---------------------------------------
set -g status-style bg=black,fg=yellow,none

set -g status-left-length 15
set -g status-left '#{?client_prefix,#[fg=white],#[bg=brightblack]} #S '

set -g status-right-style fg=black,bg=brightblue,none
set -g status-right-length 83
set -g status-right "#[fg=brightblack,bg=brightyellow] %Y-%m-%d %H:%M:%S #[fg=black,bg=brightblue] ⌂ #h "

set-window-option -g window-style ""
set-window-option -g window-active-style ""
set-window-option -g pane-active-border-style ""

set-window-option -g window-status-style fg=brightblack,bg=brightblue,none
set-window-option -g window-status-separator ""
set-window-option -g window-status-format "#[fg=brightblack,bg=brightblue] #I#[fg=brightblack,bg=brightblue]#F#[fg=brightblack,bg=brightblue] #W "
set-window-option -g window-status-current-style fg=brightred,bg=brightblack,bright
set-window-option -g window-status-current-format "#[fg=white,bg=blue] #I#[fg=white,bg=blue]#F#[fg=white,bg=blue] #W "

# pane border
set -g pane-border-style fg=black
set -g pane-active-border-style fg=brightgreen

# message text
set -g message-style bg=black,fg=brightred

# pane number display
set -g display-panes-active-colour blue
set -g display-panes-colour brightred

# clock
set-window-option -g clock-mode-colour green

# bell
set-window-option -g window-status-bell-style fg=black,bg=red

#--------------------------------------------------------
# Plugins
#--------------------------------------------------------
# Config extrakto
set -g @extrakto_key 'tab'
set -g @extrakto_grab_area '0'
set -g @extrakto_split_size '12'
run-shell '${XDG_DATA_HOME}/tmux/plugins/extrakto/extrakto.tmux'

# Config better-mouse
set -g @scroll-speed-num-lines-per-scroll '1'
set -g @scroll-without-changing-pane 'on'
run-shell '${XDG_DATA_HOME}/tmux/plugins/better-mouse/scroll_copy_mode.tmux'

# Config fingers / thumbs
unbind-key f
set -g @thumbs-key f
set -g @thumbs-command 'echo -n {} | pbcopy'
run-shell $XDG_DATA_HOME/tmux/plugins/thumbs/tmux-thumbs.tmux

# set -g @fingers-key f
# set -g @fingers-ctrl-action ':open:'
# set -g @fingers-shift-action ':paste:'
# set -g @fingers-hint-position 'right'
# set -g @fingers-hint-format '#[fg=yellow,bold]%s'
# set -g @fingers-highlight-format '#[fg=blue,bold,dim]%s'
# set -g @fingers-selected-hint-format '#[fg=green,bold]%s'
# set -g @fingers-selected-highlight-format '#[fg=red,bold]%s'
# run-shell $XDG_CONFIG_HOME/tmux/plugins/fingers/tmux-fingers.tmux

# Config resurrect
# Only the following variables and special chars are allowed: $HOME, $HOSTNAME, and ~.
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-dir '$HOME/.local/share/tmux/resurrect-sessions'
set -g @resurrect-strategy-vim 'off'
set -g @resurrect-strategy-nvim 'off'
run-shell '${XDG_DATA_HOME}/tmux/plugins/resurrect/resurrect.tmux'

# Config continuum
set -g @continuum-save-interval '15'
set -g @continuum-restore 'on'
run-shell '${XDG_DATA_HOME}/tmux/plugins/continuum/continuum.tmux'

#  vim: set ft=tmux ts=2 sw=2 tw=80 noet :
