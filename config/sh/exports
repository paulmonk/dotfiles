#!/bin/sh

#------------------------------------------------------------------------------
# This file contains most of our environment exports.
#------------------------------------------------------------------------------
# XDG directories
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"

# Set Kernel.
KERNEL="$(uname -s)"
export KERNEL


# Homebrew opts
# Abort installation of cask if no checksum is defined
export HOMEBREW_CASK_OPTS="--require-sha"
# Force use of our curlrc
export HOMEBREW_CURLRC="1"
# Force homebrew software
export HOMEBREW_FORCE_BREWED_CURL="1"
export HOMEBREW_FORCE_BREWED_GIT="1"
# brew upgrade always assumes --cleanup has been passed
export HOMEBREW_INSTALL_CLEANUP="1"
# Disable anonymous statistics collections
export HOMEBREW_NO_ANALYTICS="1"
# Disable automatic updates to keep in control of brew updates
export HOMEBREW_NO_AUTO_UPDATE="1"
# When checking out a public repository, by default, your username is always sent, not now.
export HOMEBREW_NO_GITHUB_API="1"
# Avoid protocol downgrades from HTTPS to HTTP via redirect
export HOMEBREW_NO_INSECURE_REDIRECT="1"

# macOS
if [ "${KERNEL}" = "Darwin" ]; then
  # Set Default PATH
  export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"

  # Prefix
  export BREW_PREFIX="/usr/local/homebrew"
  export PREFIX="${BREW_PREFIX}"

  # XDG
  export XDG_RUNTIME_DIR="/tmp/run"
  [ ! -d "${XDG_RUNTIME_DIR}" ] && mkdir -m 0700 "${XDG_RUNTIME_DIR}"

  # Use homebrew GNU tools instead of system BSD
  # =============
  # Coreutils
  export PATH="${BREW_PREFIX}/opt/coreutils/libexec/gnubin:${PATH}"
  export MANPATH="${BREW_PREFIX}/opt/coreutils/libexec/gnuman:${MANPATH}"

  # Findutils
  export PATH="${BREW_PREFIX}/opt/findutils/libexec/gnubin:${PATH}"
  export MANPATH="${BREW_PREFIX}/opt/findutils/libexec/gnuman:${MANPATH}"

  # Sed
  export PATH="${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin:${PATH}"
  export MANPATH="${BREW_PREFIX}/opt/gnu-sed/libexec/gnuman:${MANPATH}"

  # Use homebrew tools for build support
  # =============
  # Openssl
  export PATH="${BREW_PREFIX}/opt/openssl/bin:${PATH}"
  export LDFLAGS="-L${BREW_PREFIX}/opt/openssl/lib ${LDFLAGS}"
  export CPPFLAGS="-I${BREW_PREFIX}/opt/openssl/include ${CPPFLAGS}"

  # Zlib
  export LDFLAGS="-L${BREW_PREFIX}/opt/zlib/lib ${LDFLAGS}"
  export CPPFLAGS="-I${BREW_PREFIX}/opt/zlib/include ${CPPFLAGS}"

  # Memcached
  export LIBMEMCACHED="${BREW_PREFIX}"

  # Xcode
  # BUILD Flags
  # Ensure CommandLineTools SDK is used correctly
  CFLAGS="-I$(xcrun --show-sdk-path)/usr/include -I/usr/local/include"
  export CFLAGS

  # Android
  export ANDROID_HOME="${HOME}/Library/Android/sdk"
  export PATH="${PATH}:${ANDROID_HOME}/emulator"
  export PATH="${PATH}:${ANDROID_HOME}/tools"
  export PATH="${PATH}:${ANDROID_HOME}/tools/bin"
  export PATH="${PATH}:${ANDROID_HOME}/platform-tools"

  # Set defaults
  export BROWSER="open"
  export TERMINAL="open"

  # CPU
  CPU_CORES="$(sysctl -n hw.ncpu)"
else
  # Prefix
  export BREW_PREFIX="${XDG_DATA_HOME}/Homebrew"
  export PREFIX="/usr"

  # Set defaults
  export BROWSER="${PREFIX}/bin/chromium"
  export TERMINAL="${PREFIX}/bin/kitty"

  # CPU
  CPU_CORES="$(nproc)"

  # GTK 2: Pull GTK2 RC files from the standard config location, similar to gtk-3.0
  export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"

  # GTK 3: HiDPI.
  # Scale UI elements by a factor of two
  # export GDK_SCALE="2"
  # Undo text scaling.
  # export GDK_DPI_SCALE="0.5"

  # QT 5.6: HiDPI
  # export QT_AUTO_SCREEN_SCALE_FACTOR="1"

  # Qt: Forces QT to use GTK icons
  export DESKTOP_SESSION="gnome"

  # XSECURELOCK
  export XSECURELOCK_FONT="-misc-roboto-medium-r-normal--0-0-0-0-p-0-iso10646-1"
  export XSECURELOCK_PASSWORD_PROMPT=time_hex
  export XSECURELOCK_SHOW_HOSTNAME="0"
  export XSECURELOCK_SHOW_USERNAME="0"
  export XSECURELOCK_WANT_FIRST_KEYPRESS="1"

  # Zeal: https://github.com/zealdocs/zeal/issues/172
  export QT_QPA_PLATFORMTHEME="gtk2"
fi

# Add homebrew bin
export PATH="${BREW_PREFIX}/bin:${BREW_PREFIX}/sbin:${PATH}"

# Defaults
export LC_ALL="en_GB.UTF-8"
export LANG="en_GB.UTF-8"
export PAGER="less"

# Defaults: Editor
if command -v nvim >/dev/null 2>&1; then
  export EDITOR="nvim"
  export MANPAGER="nvim -c 'set ft=man' -"
elif command -v vim >/dev/null 2>&1; then
  export EDITOR="vim"
  export MANPAGER="vim -c 'set ft=man' -"
else
  export EDITOR="vi"
  # Donâ€™t clear the screen after quitting a manual page
  export MANPAGER="less -X"
fi
export VISUAL="${EDITOR}"

# Local Bin
export PATH="${HOME}/.local/bin:${PATH}"

# Ack configuration
if [ -f "${XDG_CONFIG_HOME}/ack/ackrc" ]; then
  export ACKRC="${XDG_CONFIG_HOME}/ack/ackrc"
fi
export ACK_PAGER_COLOR="less -x4SRFX"

# Bat
export BAT_THEME="TwoDark"

# Curl
export CURL_HOME="${XDG_CONFIG_HOME}/curl"
# .netrc
if [ -f "${XDG_CONFIG_HOME}/netrc/config" ]; then
  export CURLOPT_NETRC_FILE="${XDG_CONFIG_HOME}/netrc/config"
fi

# Docker
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"

# Docker version 1.8 introduced Content Trust, which allows you to verify the
# authenticity, integrity, and publication date of Docker images that are made
# available on the Docker Hub Registry. Set this to 1 to enabled.
export DOCKER_CONTENT_TRUST="1"

if command -v docker-machine >/dev/null 2>&1; then
  export MACHINE_STORAGE_PATH="${XDG_DATA_HOME}/docker-machine"
fi

# Facebook PathPicker
export FPP_DIR="${XDG_CACHE_HOME}/fpp"

# GCC
export GCC_COLORS="1"

# Git
# This is used in multiple aliases in the config file.
export GIT_REVIEW_BASE="master"

# GNUPG
export GNUPGHOME="${XDG_CONFIG_HOME}/gnupg"

# GO configuration
export GOPATH="${XDG_DATA_HOME}/go"
export PATH="${PATH}:${GOPATH}/bin"

# Haskell cabal configuration
export PATH="${PATH}:${HOME}/.cabal/bin"

# HTTPIE
export HTTPIE_CONFIG_DIR="${XDG_CONFIG_HOME}/httpie"

# JAVA openjdk.
export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=\"${XDG_CONFIG_HOME}/java\""

# LESS
export LESS="--tabs=4 --quit-if-one-screen --ignore-case --no-init --QUIET --LONG-PROMPT --RAW-CONTROL-CHARS"
export LESSCHARSET="UTF-8"
export LESSHISTFILE="${XDG_CACHE_HOME}/less/history"
export LESSKEY="${XDG_CONFIG_HOME}/less/lesskey/output"

# Lua user config
export LUAROCKS_CONFIG="${XDG_CONFIG_HOME}/luarocks/config.lua"

# Make
export MAKEFLAGS="-j ${CPU_CORES}"

# MariaDB / MySQL
export MYSQL_HISTFILE="${XDG_DATA_HOME}/mysql/history"

# MPV
export MPV_HOME="${XDG_CONFIG_HOME}/mpv"

# Ncurses
# Look for terminfo files under data
if [ -d "${XDG_DATA_HOME}/terminfo" ]; then
  export TERMINFO="${XDG_DATA_HOME}/terminfo"
  export TERMINFO_DIRS="${XDG_DATA_HOME}/terminfo:${PREFIX}/share/terminfo"
fi

# Node / NPM / Nave
export BABEL_CACHE_PATH="${XDG_CACHE_HOME}/babel.json"
export NODE_REPL_HISTORY="${XDG_DATA_HOME}/node/repl_history"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
export NAVE_DIR="${XDG_DATA_HOME}/nave"
export NAVE_JOBS="${CPU_CORES}"
export PATH="${PATH}:${XDG_DATA_HOME}/npm/bin"

# NotMuch
export NOTMUCH_CONFIG="${XDG_CONFIG_HOME}/notmuch/config"
export NMBGIT="${XDG_DATA_HOME}/notmuch/nmbug"

# Pass
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}/pass"

# Postgresql
export PSQLRC="${XDG_CONFIG_HOME}/pg/psqlrc"
export PSQL_HISTORY="${XDG_CACHE_HOME}/pg/psql_history"
export PGPASSFILE="${XDG_CONFIG_HOME}/pg/pgpass"
export PGSERVICEFILE="${XDG_CONFIG_HOME}/pg/pg_service.conf"

# Python
export IPYTHONDIR="${XDG_CONFIG_HOME}/ipython"
export JUPYTER_CONFIG_DIR="${XDG_CONFIG_HOME}/jupyter"
export PYENV_ROOT="${XDG_DATA_HOME}/pyenv"
export PYLINTHOME="${XDG_CACHE_HOME}/pylint"
export PYTHON_EGG_CACHE="${XDG_CACHE_HOME}/python_eggs"
export PYTHONUSERBASE="${XDG_DATA_HOME}/python"
export VIRTUAL_ENV_DISABLE_PROMPT="1"
export PATH="${PATH}:${PYTHONUSERBASE}/bin"

# RCM
export RCRC="${XDG_CONFIG_HOME}/rcm/rcrc"

# Readline
export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"

# Ruby: Always install ruby gems local to the user
export GEMRC="${XDG_CONFIG_HOME}/gem/gemrc"
GEM_HOME="${XDG_DATA_HOME}/gem/$(ruby -e 'puts RbConfig::CONFIG["ruby_version"]')"
export GEM_HOME
export GEM_PATH=${GEM_HOME}
export GEM_SPEC_CACHE="${XDG_CACHE_HOME}/gem/specs"
export PATH="${PATH}:${GEM_HOME}/bin"

# Rust: Cargo configuration
export CARGO_BUILD_JOBS="${CPU_CORES}"
export CARGO_HOME="${XDG_DATA_HOME}/cargo"
export PATH="${PATH}:${CARGO_HOME}/bin"
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"

# Sudo
export SUDO_PROMPT="sudo password for %p@[30;43m%h[m: "

# sshrc
export SSHHOME="${XDG_CONFIG_HOME}/sshrc"

# Task
export TASKDATA="${XDG_DATA_HOME}/task"
export TASKRC="${XDG_CONFIG_HOME}/task/taskr"

# Tmux
export TMUX_TMPDIR="${XDG_RUNTIME_DIR}"
export TMUXP_CONFIGDIR="${XDG_CONFIG_HOME}/tmuxp"

# Virtualbox
export VBOX_USER_HOME="${XDG_CONFIG_HOME}/virtualbox"

# Wine
if command -v wine >/dev/null 2>&1; then
  [ ! -d "${XDG_DATA_HOME}/wineprefixes" ] && mkdir -m 0700 "${XDG_DATA_HOME}/wineprefixes"
  export WINEPREFIX="${XDG_DATA_HOME}/wineprefixes/default"
fi

# Wget
if [ -f "${XDG_CONFIG_HOME}/wget/config" ]; then
  export WGETRC="${XDG_CONFIG_HOME}/wget/config"
fi

# vim: set ft=sh ts=2 sw=2 tw=80 et :
