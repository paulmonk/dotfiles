# ==================
# Git Config
# ==================
[core]
    attributesfile = ~/.config/git/attributes
    excludesfile = ~/.config/git/ignore

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # https://docs.github.com/en/github/using-git/configuring-git-to-handle-line-endings
    autocrlf = input

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]
    ui = auto

[color "branch"]
    plain = yellow
    current = magenta bold
    local = blue bold
    remote = white
    upstream = green bold

[color "diff"]
    plain = normal
    old = red
    new = green
    commit = yellow
    meta = blue
    frag = cyan
    func = yellow bold
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]
    header = 243
    added = green bold
    changed = red
    untracked = blue bold
    branch = green bold
    nobranch = red

[commit]
    gpgSign = true
    template = ~/.config/git/templates/commit.txt

[credential]
    helper = cache --timeout=3600

[diff]
    algorithm = patience
    mnemonicPrefix = true
    renames = copies

[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[diff "nodiff"]
    command = /usr/bin/true

[fetch]
    # https://resources.infosecinstitute.com/security-best-practices-for-git-users/
    fsckObjects = true
    prune = true
    recurseSubmodules = true

[init]
    templatedir = ~/.config/git/templates

[interactive]
    diffFilter = delta --color-only --theme='Solarized (dark)'

[merge]
    # Standard diff is two sets of final changes.
    # This introduces the original text before each side's changes.
    # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle
    conflictstyle = diff3

    # Include summaries of merged commits in newly created merge commit messages
    log = true

    tool = vimdiff

[mergetool]
    prompt = false
    keepBackup = true
    writeToTemp = true

[pager]
    diff = delta  --keep-plus-minus-markers --theme='Solarized (dark)' | less --tabs=1,3
    show = delta  --keep-plus-minus-markers --theme='Solarized (dark)' | less --tabs=1,3
    show-branch = true
    status = true

[pull]
    # Rebase all pulls by default, instead of merge
    rebase = true

[push]
    # Defines the action git push should take if no refspec is explicitly
    # given:
    # current = Push the current branch to update a branch with the same
    # name on the receiving end
    default = current

    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[pretty]
    log = %C(240)%h%C(reset) -%C(auto)%d%Creset %s %C(242)(%an %ar)
    detailed = %C(cyan)%h %C(red)%ad %C(blue)[%an]%C(magenta)%d %C(white)%s
    shorter = %C(auto)%D %C(240)--%C(242)%gD%N %ad by %C(white)%cn%C(reset)
    multiline = %C(blue)──────%Creset%n %C(auto)commit %h %C(auto) %D%Creset%n %C(cyan)%an%Creset | %Cgreen%cr%Creset%n%+B

[receive]
    # https://resources.infosecinstitute.com/security-best-practices-for-git-users/
    fsckObjects = true

[rebase]
    autosquash = true
    autostash = true

[rerere]
    enabled = true

[submodule]
    fetchJobs = 4

[status]
    submodulesummary = true
    showUntrackedFiles = all

[transfer]
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=813157
    # https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
    # https://resources.infosecinstitute.com/security-best-practices-for-git-users/
    fsckobjects = true

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

[user]
    name = Paul Monk
    email = git@paulmonk.org
    # Add an `!` to the end of the key to be explicit about what key to use.
    # otherwise GPG will override and pick the most recent valid key.
    signingKey = 76A45DC5162383BE0FF431F94C0993B829F49191!
    useConfigOnly = true

[includeIf "gitdir:~/projects/streetteam/**/"]
    path = ~/.config/git/users/streetteam

[alias]
    a = add
    br = branch -v
    branches = branch -a
    c = commit -v
    ca = !git add -A && git commit -av
    cl = clone --recursive
    cm = commit -vm
    co = checkout
    cp = cherry-pick
    d = diff
    dh = diff HEAD
    dp = !git log --pretty=oneline | fzf | cut -d ' ' -f1 | xargs -o git show
    ds = diff --staged
    dw = diff --color-words
    l = log --pretty=log -n 20 --graph --abbrev-commit
    lb = log --graph --simplify-by-decoration --pretty=shorter --all --notes --date-order --relative-date
    lg = log --graph --pretty=log --all
    lgd = log --graph --pretty=log
    lgw = !sh -c '"while true; do clear; git lg -15; sleep 5; done"'
    lcp = diff @{1}..
    lcrev = log --reverse --no-merges --stat @{1}..
    patch = !git --no-pager diff --no-color
    p = push -u origin HEAD
    pf = p --force-with-lease
    pu = !"git pull && git smu"
    remotes = remote -v
    s = status -sb
    sm = submodule
    smu = submodule update --init --recursive --remote --rebase
    st = stash
    st-all = stash save --include-untracked
    t = tag --column
    tn = tag -n
    tags = tag -l
    w = whatchanged --decorate
    wp = whatchanged --decorate -p

    #===============================================
    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # https://twitter.com/TrevorBramble/status/774292970681937920
    alias = !git config -l | grep ^alias | cut -c 7- | sort

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    brdm = "!git branch --merged | grep -v '\\*\\|master' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=log --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=log --decorate --date=short --grep=$1; }; f"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Checkout a pull request from origin (of a github repository)
    pr = !"f() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!f() { git rebase -i HEAD~$1; }; f"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!f() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; f"

    # Sync all tags
    sync-tags = fetch --prune origin '+refs/tags/*:refs/tags/*'

    # Undo the last commit.
    undo = !git reset HEAD~1 --mixed
    #===============================================

    #===============================================
    # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/

    # Sometimes you find you want to change a file that’s in a repository but
    # by no means want to check in your edits.
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    # Often during a merge you know you want to take a file from one side wholesale.
    # The following aliases expose the ours and theirs commands which will let you
    # pick a file(s) from the current branch or the merged branch respectively:
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # Take a snapshot of your current working tree without removing the
    # changes from your tree.
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot
    #===============================================

    #===============================================
    # https://blog.jez.io/cli-code-review/
    #  # list files which have changed since REVIEW_BASE
    # (GIT_REVIEW_BASE defaults to 'master' in my shell environment.)
    files = !git diff --name-only $(git merge-base HEAD \"${GIT_REVIEW_BASE\")

    # Same as above, but with a diff stat instead of just names
    # (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$GIT_REVIEW_BASE\")

    # NOTE: These aliases depend on the `git files` alias from
    # a few sections ago!
    #
    # Open all files changed since REVIEW_BASE in Vim tabs
    # Then, run fugitive's :Gdiff in each tab, and finally
    # tell vim-gitgutter to show +/- for changes since REVIEW_BASE
    review = !vim -p $(git files) +\"tabdo Gdiff $GIT_REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$GIT_REVIEW_BASE'\"

    # Same as the above, except specify names of files as arguments,
    # instead of opening all files:
    # git reviewone foo.js bar.js
    reviewone = !vim -p +\"tabdo Gdiff $GIT_REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$GIT_REVIEW_BASE'\"
    #===============================================

    #===============================================
    # https://stackoverflow.com/questions/9301782/need-to-reset-git-branch-to-origin-version/33244119#33244119
    #
    # Since reset is a potentially dangerous call (especially with the --hard option, you will lose any uncommitted changes),
    # it first tells you what it's about to do.
    # For example if you're on branch dev-container with remote called qcpp/dev-container and you enter git catchup, you'll be prompted:
    #
    # reset dev-container to qcpp/dev-container? (Y/n)
    #
    # If you then type y or just hit return, it will perform the reset. If you enter anything else the reset will not be carried out.
    catchup = "!f(){ echo -n \"reset \\033[0;33m$(git symbolic-ref -q --short HEAD)\\033[0m to \\033[0;33m$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD))\\033[0m? (Y/n) \"; read -r ans; if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" -o -z \"$ans\" ]; then git reset --hard $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)); else echo \"catchup aborted\"; fi }; f"
    #===============================================

# vim: set ft=gitconfig ts=4 sw=4 tw=80 et :
