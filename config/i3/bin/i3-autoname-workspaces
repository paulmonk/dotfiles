#!/usr/bin/python3

import re
import signal
import subprocess
import sys

import i3ipc

WINDOW_ICONS = {
    'chromium-browser': '',
    'firefox': '',
    'kitty': '',
    'libreoffice-calc': '',
    'libreoffice-writer': '',
    'mpv': '',
    'peek': '',
    'rofi': '',
    'slack': '',
    'whatsapp': '',
    'zeal': '',
}

DEFAULT_ICON = ''


def xprop(win_id, win_property):
    win_id = str(win_id)
    try:
        prop = subprocess.check_output(
            ['xprop', '-id', win_id, win_property],
            stderr=subprocess.DEVNULL
        )
        prop = prop.decode('utf-8')
        return re.findall(r'"([^"]+)"', prop)
    except subprocess.CalledProcessError:
        sys.stdout.write(f'Unable to get property for window `{win_id}`')
    return None


def icon_for_window(window):
    wm_classes = xprop(window.window, 'WM_CLASS')
    for wm in wm_classes:
        wm = wm.lower()
        if wm in WINDOW_ICONS:
            return WINDOW_ICONS[wm]
    return DEFAULT_ICON


def parse_workspace_name(name):
    return re.match(
        r'(?P<num>\d+):?(?P<shortname>\w+)? ?(?P<icons>.+)?', name
    ).groupdict()


def construct_workspace_name(parts):
    new_name = str(parts['num'])
    if parts['shortname'] or parts['icons']:
        new_name += ':'

        if parts['shortname']:
            new_name += parts['shortname']

        if parts['icons']:
            new_name += ' ' + parts['icons']

    return new_name


def rename_workspaces(i3, undo=False):
    workspaces = i3.get_tree().workspaces()
    for workspace in workspaces:
        name_parts = parse_workspace_name(workspace.name)

        # Reset icons on undo
        if undo:
            name_parts['icons'] = None
        else:
            name_parts['icons'] = (
                '  '.join([
                    icon_for_window(w) for w in workspace.leaves()
                ]) + ' '
            )

        new_name = construct_workspace_name(name_parts)
        i3.command(f'rename workspace "{workspace.name}" to "{new_name}"')


def undo_window_renaming(i3):
    rename_workspaces(i3, undo=True)
    i3.main_quit()
    sys.exit(0)


if __name__ == '__main__':
    # Create the Connection object that can be used to send commands and subscribe
    # to events
    i3 = i3ipc.Connection()

    # Exit gracefully when ctrl+c is pressed
    for sig in [signal.SIGINT, signal.SIGTERM]:
        signal.signal(sig, lambda signal, frame: undo_window_renaming(i3))

    def window_event_handler(i3, event):
        """
        Event handler for window events.
        """
        if event.change in ['new', 'close', 'move']:
            rename_workspaces(i3)

    # Subscribe to events
    i3.on('window', window_event_handler)

    # Rename workspaces by default.
    rename_workspaces(i3)

    # Start the main loop and wait for events to come in.
    i3.main()
