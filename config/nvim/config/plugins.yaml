---
# PLUGINS
# ==========================================
# Startup
# -------
# Dark powered Vim/Neovim plugin manager
- repo: Shougo/dein.vim

# Solarized Theme
- repo: lifepillar/vim-solarized8

# Status bar
# Lean & mean status/tabline for vim that's light as air
- repo: vim-airline/vim-airline
  hook_add: |
    let g:airline#extensions#branch#symbol = ''
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9

- repo: vim-airline/vim-airline-themes
  depends: vim-airline
  hook_add: |
    let g:airline_theme = 'solarized'
    let g:airline_solarized_bg = 'dark'

# See the contents of registers
- repo: junegunn/vim-peekaboo
  hook_add: |
    nnoremap <buffer> <silent> " :<c-u>call peekaboo#peek(v:count1, 'quote',  0)<cr>
    xnoremap <buffer> <silent> " :<c-u>call peekaboo#peek(v:count1, 'quote',  1)<cr>
    nnoremap <buffer> <silent> @ :<c-u>call peekaboo#peek(v:count1, 'replay', 0)<cr>
    inoremap <buffer> <silent> <c-r> <c-o>:call peekaboo#peek(1, 'ctrl-r',  0)<cr>

# Heuristically set buffer indent options
- repo: tpope/vim-sleuth

# Heuristically set options based on editorconfig
- repo: editorconfig/editorconfig-vim

# A Git wrapper so awesome, it should be illegal, lol.
- repo: tpope/vim-fugitive

# Efficient alternative to the standard matchparen plugin
- repo: itchyny/vim-parenmatch

# Make scrolling in Vim more pleasant
- repo: cskeeters/vim-smooth-scroll

# Seamless navigation between tmux panes and vim split
- repo: christoomey/vim-tmux-navigator

# Terminus enhances Vim's and Neovim's integration with the terminal
# cursor shape, mouse support, focus reporting, bracketed paste
- repo: wincent/terminus

# Disable hlsearch when done.
- repo: romainl/vim-cool

# QuickFix / Loclist Improvements
- repo: romainl/vim-qf

# Underlines word under cursor
- repo: itchyny/vim-cursorword
  hook_add: |
    autocmd MyAutoCmd FileType denite,qf let b:cursorword=0
    autocmd MyAutoCmd InsertEnter * let b:cursorword=0
    autocmd MyAutoCmd InsertLeave * let b:cursorword=1

# Asynchronous linting/fixing for Vim
- repo: w0rp/ale
  if: empty($VIM_MINIMAL)
  hook_add: |
    let g:ale_sign_error = '!E'
    let g:ale_sign_warning = '!W'
    let g:ale_sign_info = 'ℹ'
    source $VIMPATH/config/plugins/ale.vim

# Lazy Loading
# ==========================================
# Syntax
# ---------
# Ansible
- repo: pearofducks/ansible-vim
  on_ft:
    - ansible
    - ansible_hosts
    - ansible_template

# CSS
- repo: hail2u/vim-css3-syntax
  on_ft: css

- repo: cakebaker/scss-syntax.vim
  on_ft:
    - scss
    - sass

- repo: groenewege/vim-less
  on_ft: less

# CSS: Preview colors in source-code while editing
- repo: ap/vim-css-color
  on_ft:
    - css
    - scss
    - sass

# CSV
- repo: chrisbra/csv.vim
  on_ft: csv

# Docker
- repo: ekalinin/Dockerfile.vim
  on_ft:
    - Dockerfile
    - docker-compose

# Fish
- repo: dag/vim-fish
  on_ft: fish

# Git
- repo: tpope/vim-git
  on_ft:
    - gitcommit
    - gitconfig
    - gitrebase

# Go
- repo: fatih/vim-go
  on_ft:
    - go
    - gotexttmpl
    - gohtmltmpl
  hook_add: |
    autocmd MyAutoCmd FileType go
      \   nmap <C-]> <Plug>(go-def)
      \ | nmap <Leader>god  <Plug>(go-describe)
      \ | nmap <Leader>goc  <Plug>(go-callees)
      \ | nmap <Leader>goC  <Plug>(go-callers)
      \ | nmap <Leader>goi  <Plug>(go-info)
      \ | nmap <Leader>gom  <Plug>(go-implements)
      \ | nmap <Leader>gos  <Plug>(go-callstack)
      \ | nmap <Leader>goe  <Plug>(go-referrers)
      \ | nmap <Leader>gor  <Plug>(go-run)
      \ | nmap <Leader>gov  <Plug>(go-vet)
  hook_source: |
    let g:go_highlight_array_whitespace_error = 0
    let g:go_highlight_chan_whitespace_error = 0
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 0
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 0
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0

# GraphQL
- repo: jparise/vim-graphql
  on_ft:
    - gql
    - graphql
    - graphqls

# HTML & Jinja
# Omnicomplete and syntax
- repo: othree/html5.vim
  on_ft:
    - html
    - htmldjango
    - htmljinja
  hook_add: |
    let g:html5_aria_attributes_complete = 1
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0

- repo: mitsuhiko/vim-jinja
  on_ft:
    - htmljinja
    - jinja

# i3
- repo: mboughaba/i3config.vim
  on_ft: i3config

# JavaScript
- repo: pangloss/vim-javascript
  on_ft:
    - javascript
    - javascript.jsx
    - jsx
  hook_source: |
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_flow = 1

# JavaScript: React JSX
- repo: MaxMEllon/vim-jsx-pretty
  on_ft:
    - javascript
    - javascript.jsx
    - jsx

# JavaScript: Generate JSDoc to your code
- repo: heavenshell/vim-jsdoc
  on_ft:
    - javascript
    - javascript.jsx
    - jsx
  hook_add: |
    let g:jsdoc_enable_es6 = 1

# JavaScript: Node workflow
- repo: moll/vim-node
  on_ft:
    - javascript
    - javascript.jsx
    - jsx

# JSON
- repo: elzr/vim-json
  on_ft: json

# Logreview
- repo: andreshazard/vim-logreview
  on_ft: logreview

# Logstash
- repo: robbles/logstash.vim
  on_ft: logstash

# Lua
- repo: tbastos/vim-lua
  on_ft: lua

# Markdown
- repo: plasticboy/vim-markdown
  depends:
    - vim-json
    - vim-toml
  on_ft: markdown
  hook_add: |
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_fenced_languages = [
      \ 'bash=sh',
      \ 'c++=cpp',
      \ 'ini=dosini',
      \ 'viml=vim',
      \ 'zsh=sh'
      \ ]
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_json_frontmatter = 1
    let g:vim_markdown_initial_foldlevel = 999
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_override_foldtext = 0
    let g:vim_markdown_toml_frontmatter = 1

# Markdown: GitHub Flavored syntax highlight
- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_source: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

# Mutt
- repo: neomutt/neomutt
  on_ft:
    - mail
    - muttrc
    - neomuttrc

# Nginx
- repo: othree/nginx-contrib-vim
  on_ft: nginx

# PHP
- repo: StanAngeloff/php.vim
  on_ft: php

# Postgres
- repo: exu/pgsql.vim
  on_ft: pgsql

# Python
- repo: vim-python/python-syntax
  on_ft: python

# Python: Extend the % motion for Python files
- repo: vim-scripts/python_match.vim
  on_ft: python
  hook_add: |
    nmap <buffer> {{ [%
    nmap <buffer> }} ]%

# Python: No-BS Python code folding
- repo: tmhedberg/SimpylFold
  on_ft: python

# Python: requirements file format
- repo: raimon49/requirements.txt.vim
  on_ft: requirements

# Raml
- repo: IN3D/vim-raml
  on_ft: raml

# Rust
- repo: rust-lang/rust.vim
  on_ft: rust

# Salt
- repo: saltstack/salt-vim
  on_ft: sls

# Swift
- repo: toyamarinyon/vim-swift
  on_ft: swift

# Tmux
- repo: tmux-plugins/vim-tmux
  on_ft: tmux

# Toml
- repo: cespare/vim-toml
  on_ft: toml

# Vim
- repo: vim-jp/syntax-vim-ex
  on_ft: vim

# ==========================================
# Commands
# --------
# Utility comamnds of dein.vim with rich completion.
- repo: haya14busa/dein-command.vim
  on_cmd: Dein


# Code commenting helper
- repo: tpope/vim-commentary
  on_map: <Plug>Commentary
  hook_add: |
    xmap <Leader>v  <Plug>Commentary
    nmap <Leader>v  <Plug>CommentaryLine
    xmap gc  <Plug>Commentary
    nmap gc  <Plug>Commentary
    omap gc  <Plug>Commentary
    nmap gcc <Plug>CommentaryLine
    nmap cgc <Plug>ChangeCommentary
    nmap gcu <Plug>Commentary<Plug>Commentary

# Auto mkdir if needed on save.
- repo: benizi/vim-automkdir
  on_command: write

# Move to root of project working directory.
- repo: airblade/vim-rooter
  on_command: Rooter
  hook_source: |
    let g:rooter_manual_only = 1

# Choose window to use, like tmux's 'display-pane'
- repo: t9md/vim-choosewin
  on_map:
    n: <Plug>
  hook_add: |
    nmap -         <Plug>(choosewin)
    nmap <Leader>- :<C-u>ChooseWinSwapStay<CR>
  hook_source: |
    let g:choosewin_label = 'SDFJKLZXCV'
    let g:choosewin_overlay_enable = 1
    let g:choosewin_statusline_replace = 1
    let g:choosewin_overlay_clear_multibyte = 0
    let g:choosewin_blink_on_land = 0
    let g:choosewin_color_label = {
      \ 'cterm': [ 236, 2 ], 'gui': [ '#555555', '#000000' ] }
    let g:choosewin_color_label_current = {
      \ 'cterm': [ 234, 220 ], 'gui': [ '#333333', '#000000' ] }
    let g:choosewin_color_other = {
      \ 'cterm': [ 235, 235 ], 'gui': [ '#333333' ] }
    let g:choosewin_color_overlay = {
      \ 'cterm': [ 2, 10 ], 'gui': [ '#88A2A4' ] }
    let g:choosewin_color_overlay_current = {
      \ 'cterm': [ 72, 64 ], 'gui': [ '#7BB292' ] }

# Make blockwise Visual mode more useful
- repo: kana/vim-niceblock
  on_map:
    x: <Plug>
  hook_add: |
    xmap I  <Plug>(niceblock-I)
    xmap A  <Plug>(niceblock-A)

# Display 256 xterm colors with their RGB equivalents
- repo: guns/xterm-color-table.vim
  on_cmd: XtermColorTable

# Ultimate undo history visualizer
- repo: mbbill/undotree
  on_cmd: UndotreeToggle
  hook_add: |
    nnoremap <Leader>gu :UndotreeToggle<CR>

# Interactive Scratchpad
- repo: metakirby5/codi.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Codi

# Interactive command execution
- repo: Shougo/vimproc.vim
  build: make
  on_func: vimproc#

# Uncover usage problems in your writing
- repo: reedes/vim-wordy
  on_cmd:
    - Wordy
    - NextWordy
    - PrevWordy

# Display vim version numbers in docs
- repo: tweekmonster/helpful.vim
  on_cmd: HelpfulVersion

# Fast find and replace plugin
- repo: brooth/far.vim
  on_cmd:
    - Far
    - Farp
    - Fardo
    - Refar
    - Farundo
    - F
  hook_source: |
    source $VIMPATH/config/plugins/far.vim

# Vim motions on speed
- repo: easymotion/vim-easymotion
  on_map:
    n: <Plug>
  hook_add: |
    nmap ss <Plug>(easymotion-s2)
    nmap sd <Plug>(easymotion-s)
    nmap sf <Plug>(easymotion-overwin-f)
    map  sh <Plug>(easymotion-linebackward)
    map  sl <Plug>(easymotion-lineforward)
    " map  sj <Plug>(easymotion-j)
    " map  sk <Plug>(easymotion-k)
    map  s/ <Plug>(easymotion-sn)
    omap s/ <Plug>(easymotion-tn)
    map  sn <Plug>(easymotion-next)
    map  sp <Plug>(easymotion-prev)
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdksweoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

# Look up words in an online thesaurus
- repo: beloglazov/vim-online-thesaurus
  if: empty($VIM_MINIMAL)
  on_cmd:
    - OnlineThesaurusCurrentWord
    - Thesaurus
  hook_add: |
    nnoremap <silent> <Leader>K :<C-u>OnlineThesaurusCurrentWord<CR>
  hook_source: |
    let g:online_thesaurus_map_keys = 0

# Markdown: Gen TOC
- repo: mzlogin/vim-markdown-toc
  if: empty($VIM_MINIMAL)
  on_cmd:
    - GenTocGFM
    - GenTocRedcarpet
    - GenTocGitLab
    - UpdateToc
  hook_source: |
    let g:vmt_auto_update_on_save = 0

# ==========================================
# Interface
# ---------
# Improved * motions
- repo: haya14busa/vim-asterisk
  on_map:
    nv: <Plug>
  hook_add: |
    map *   <Plug>(asterisk-g*)
    map g*  <Plug>(asterisk-*)
    map #   <Plug>(asterisk-g#)
    map g#  <Plug>(asterisk-#)
    map z*  <Plug>(asterisk-z*)
    map gz* <Plug>(asterisk-gz*)
    map z#  <Plug>(asterisk-z#)
    map gz# <Plug>(asterisk-gz#)

# Up/down movement acceleration
- repo: rhysd/accelerated-jk
  on_map:
    n: <Plug>
  hook_add: |
    nmap <silent>j <Plug>(accelerated_jk_gj)
    nmap <silent>k <Plug>(accelerated_jk_gk)

# Jump to the edge of block
- repo: haya14busa/vim-edgemotion
  on_map:
    nv: <Plug>
  hook_add: |
    map gj <Plug>(edgemotion-j)
    map gk <Plug>(edgemotion-k)
    xmap gj <Plug>(edgemotion-j)
    xmap gk <Plug>(edgemotion-k)

# Quickly highlight words
- repo: t9md/vim-quickhl
  on_map:
    nv: <Plug>
  hook_add: |
    nmap <Leader>, <Plug>(quickhl-manual-this)
    xmap <Leader>, <Plug>(quickhl-manual-this)

# Show git changes at Vim gutter and un/stages hunks
- repo: airblade/vim-gitgutter
  on_path: .*
  hook_add: |
    nmap <Leader>hj <Plug>GitGutterNextHunk
    nmap <Leader>hk <Plug>GitGutterPrevHunk
    nmap <Leader>hs <Plug>GitGutterStageHunk
    nmap <Leader>hr <Plug>GitGutterUndoHunk
    nmap <Leader>hp <Plug>GitGutterPreviewHunk
  hook_source: |
    let g:gitgutter_grep = 'rg'
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sign_added = '+'
    let g:gitgutter_sign_modified = '*'
    let g:gitgutter_sign_removed = '-'
    let g:gitgutter_sign_removed_first_line = '--'
    let g:gitgutter_sign_modified_removed = '*-'
    let g:gitgutter_sh = $SHELL

# Visually display indent levels in code
- repo: nathanaelkane/vim-indent-guides
  on_cmd:
    - IndentGuidesEnable
    - IndentGuidesDisable
    - IndentGuidesToggle
  hook_add: |
    let g:indent_guides_enable_on_vim_startup = 1
    nmap <silent><Leader>ti :<C-u>IndentGuidesToggle<CR>
  hook_source: |
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_autocmds_enabled = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_guide_size = 1
    let g:indent_guides_indent_levels = 15
    let g:custom_exclude = [ 'help', 'denite', 'codi' ]
    autocmd MyAutoCmd BufEnter *
      \ if ! empty(&l:filetype) && index(g:custom_exclude, &l:filetype) == -1
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif
  hook_post_source: |
    call indent_guides#init_script_vars()
    call indent_guides#highlight_colors()

# Bookmarks, works independently from vim marks
- repo: MattesGroeger/vim-bookmarks
  on_path: .*
  hook_add: |
    nmap ma :<C-u>cgetexpr bm#location_list()<CR>
      \ :<C-u>Denite quickfix -buffer-name=list<CR>
    nmap mn <Plug>BookmarkNext
    nmap mp <Plug>BookmarkPrev
    nmap mm <Plug>BookmarkToggle
    nmap mi <Plug>BookmarkAnnotate
  hook_source: |
    let g:bookmark_auto_save_file = $DATAPATH.'/bookmarks'
    let g:bookmark_disable_ctrlp = 1
    let g:bookmark_no_default_key_mappings = 1
    let g:bookmark_sign = '⚐'

# Pleasant editing on Git commit messages
- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_add: |
    let g:committia_hooks = {}
    function! g:committia_hooks.edit_open(info)
      imap <buffer><C-d> <Plug>(committia-scroll-diff-down-half)
      imap <buffer><C-u> <Plug>(committia-scroll-diff-up-half)
      setlocal winminheight=1 winheight=1
      resize 10
      startinsert
    endfunction
  hook_source: |
    let g:committia_min_window_width = 70

# Highlights the matching HTML tag when the cursor is positioned on a tag
- repo: gregsexton/MatchTag
  on_ft:
    - html
    - htmldjango
    - htmljinja
    - xml

# Distraction-free writing
- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_add: |
    nnoremap <Leader>G :Goyo<CR>
  hook_source: |
    source $VIMPATH/config/plugins/goyo.vim

# Hyperfocus-writing
- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

# ==========================================
# Snippets
# ----------
- repo: Shougo/neosnippet.vim
  if: empty($VIM_MINIMAL)
  depends:
    - neosnippet-snippets
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: |
    let g:neosnippet#data_directory = $DATAPATH.'/snippets'
    imap <expr><C-o> neosnippet#expandable_or_jumpable()
      \ ? "\<Plug>(neosnippet_expand_or_jump)" : "\<ESC>o"
    xmap <silent><C-s> <Plug>(neosnippet_register_oneshot_snippet)
    smap <silent>L     <Plug>(neosnippet_jump_or_expand)
    xmap <silent>L     <Plug>(neosnippet_expand_target)
  hook_source: |
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#expand_word_boundary = 1
    autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
    autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers

# Standard snippets repository for neosnippet
- repo: Shougo/neosnippet-snippets
  if: empty($VIM_MINIMAL)

# ==========================================
# Completion
# ----------
# Print objects' documentation in echo area
- repo: Shougo/echodoc.vim
  if: empty($VIM_MINIMAL)
  on_event: CompleteDone
  hook_post_source: |
    call echodoc#enable()

# Provides support for expanding abbreviations alá emmet
- repo: mattn/emmet-vim
  if: empty($VIM_MINIMAL)
  on_event:
    - autocmd
    - InsertEnter
  on_ft:
    - html
    - htmldjango
    - htmljinja
    - css
    - javascript
    - javascript.jsx
    - jsx
  hook_add: |
    autocmd MyAutoCmd FileType html,css,jsx,javascript,javascript.jsx
      \ EmmetInstall
      \ | imap <buffer> <C-Return> <Plug>(emmet-expand-abbr)
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

# Auto-completion for quotes, parens, brackets
- repo: Raimondi/delimitMate
  on_event:
    - autocmd
    - InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_excluded_ft = 'html, htmldjango, htmljinja'

# CSS
- repo: othree/csscomplete.vim
  if: empty($VIM_MINIMAL)
  on_ft: css

# JavaScript
- repo: ternjs/tern_for_vim
  build: npm install
  if: empty($VIM_MINIMAL) && executable('npm')
  on_event:
    - autocmd
    - InsertEnter
  on_ft:
    - javascript
    - javascript.jsx
    - jsx
  hook_add: |
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0
    autocmd MyAutoCmd FileType javascript,jsx,javascript.jsx
      \  nnoremap <silent><buffer> K          :<C-u>TernDoc<CR>
      \| nnoremap <silent><buffer> <C-]>      :<C-u>TernDefSplit<CR>
      \| nnoremap <silent><buffer> <leader>g  :<C-u>TernType<CR>
      \| nnoremap <silent><buffer> <leader>n  :<C-u>TernRefs<CR>
      \| nnoremap <silent><buffer> <leader>r  :<C-u>TernRename<CR>
  hook_post_source: |
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=tern#Complete

# Parameter Completion
- repo: othree/jspc.vim
  if: empty($VIM_MINIMAL)
  on_ft:
    - javascript
    - javascript.jsx
    - jsx

# PHP
- repo: shawncplus/phpcomplete.vim
  if: empty($VIM_MINIMAL)
  on_ft: php
  on_event:
    - autocmd
    - InsertEnter

# Python
- repo: davidhalter/jedi-vim
  if: empty($VIM_MINIMAL)
  on_ft: python
  hook_add: |
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#completions_command = ''
    let g:jedi#completions_enabled = 0
    let g:jedi#documentation_command = 'K'
    let g:jedi#goto_assignments_command = '<leader>g'
    let g:jedi#goto_command = '<C-]>'
    let g:jedi#rename_command = '<Leader>r'
    let g:jedi#show_call_signatures = 1
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#usages_command = '<Leader>n'
  hook_source: |
    let g:jedi#max_doc_height = 100
    let g:jedi#popup_on_dot = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#quickfix_window_height = 10
    let g:jedi#use_splits_not_buffers = 'right'
    let g:jedi#use_tag_stack = 0

# Ruby
- repo: osyo-manga/vim-monster
  if: empty($VIM_MINIMAL)
  on_ft: ruby

# Only NeoVim
# ------------------------------
# Dark powered asynchronous completion framework
- repo: Shougo/deoplete.nvim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  hook_source: |
    source $VIMPATH/config/plugins/deoplete.vim
    call deoplete#enable()
  depends:
    - neco-syntax

# Syntax source for deoplete
- repo: Shougo/neco-syntax
  if: has('nvim') && empty($VIM_MINIMAL)

# Emoji
- repo: fszymanski/deoplete-emoji
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft:
    - gitcommit
    - markdown
  on_event: InsertEnter

# Go
- repo: zchee/deoplete-go
  build: make
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: go
  on_event:
    - autocmd
    - InsertEnter

# Haskell
- repo: eagletmt/neco-ghc
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: haskell
  on_event:
    - autocmd
    - InsertEnter

# Javascript
- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: has('nvim') && empty($VIM_MINIMAL) && executable('npm')
  on_ft:
    - javascript
    - javascript.jsx
    - jsx
  on_event:
    - autocmd
    - InsertEnter
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0

# Python
- repo: zchee/deoplete-jedi
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: python
  on_event:
    - autocmd
    - InsertEnter
  hook_source: |
    autocmd MyAutoCmd FileType python setlocal omnifunc=

# Ruby
- repo: fishbullet/deoplete-ruby
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: ruby
  on_event:
    - autocmd
    - InsertEnter

# Tmux
- repo: wellle/tmux-complete.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: tmux
  on_event:
    - autocmd
    - InsertEnter
  hook_add: |
    let g:tmuxcomplete#trigger = ''

# Vim
- repo: Shougo/neco-vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: vim
  on_event:
    - autocmd
    - InsertEnter

# ZSH
- repo: zchee/deoplete-zsh
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: zsh
  on_event:
    - autocmd
    - InsertEnter

# ==========================================
# Denite
# ------
# Dark powered asynchronous unite all interfaces
- repo: Shougo/denite.nvim
  on_cmd: Denite
  hook_add: |
    nnoremap <silent><LocalLeader>r :<C-u>Denite -resume -refresh<CR>
    nnoremap <silent><LocalLeader>f :<C-u>Denite file/rec<CR>
    nnoremap <silent><LocalLeader>b :<C-u>Denite buffer file_old -default-action=switch<CR>
    nnoremap <silent><LocalLeader>d :<C-u>Denite directory_rec -default-action=cd<CR>
    nnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register<CR>
    xnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register -default-action=replace<CR>
    nnoremap <silent><LocalLeader>n :<C-u>Denite dein<CR>
    nnoremap <silent><LocalLeader>g :<C-u>Denite grep<CR>
    nnoremap <silent><LocalLeader>j :<C-u>Denite jump change file_point<CR>
    nnoremap <silent><LocalLeader>o :<C-u>Denite outline<CR>
    nnoremap <silent><LocalLeader>t :<C-u>Denite -buffer-name=tag tag:include<CR>
    nnoremap <silent><LocalLeader>p :<C-u>Denite -mode=normal jump<CR>
    nnoremap <silent><LocalLeader>h :<C-u>Denite help<CR>
    nnoremap <silent><LocalLeader>/ :<C-u>Denite line<CR>
    nnoremap <silent><LocalLeader>* :<C-u>DeniteCursorWord line<CR>
    nnoremap <silent><LocalLeader>; :<C-u>Denite command command_history<CR>
    " Open Denite with word under cursor or selection
    nnoremap <silent> <Leader>gt :DeniteCursorWord -buffer-name=tag tag:include<CR>
    nnoremap <silent> <Leader>gf :DeniteCursorWord file/rec<CR>
    nnoremap <silent> <Leader>gg :DeniteCursorWord grep<CR>
    vnoremap <silent> <Leader>gg
      \ :<C-u>call <SID>get_selection('/')<CR>
      \ :execute 'Denite grep:::'.@/<CR><CR>

    function! s:get_selection(cmdtype)
      let temp = @s
      normal! gv"sy
      let @/ = substitute(escape(@s, '\'.a:cmdtype), '\n', '\\n', 'g')
      let @s = temp
    endfunction
  hook_source: |
    source $VIMPATH/config/plugins/denite.vim

# Denite location & quickfix lists
- repo: chemzqm/unite-location
  on_source: denite.nvim
  hook_add: |
    nnoremap <silent><LocalLeader>l :<C-u>Denite location_list -buffer-name=list<CR>
    nnoremap <silent><LocalLeader>q :<C-u>Denite quickfix -buffer-name=list<CR>

# gitlog, gitstatus and gitchanged sources
- repo: chemzqm/denite-git
  on_source: denite.nvim
  hook_add: |
    nnoremap <silent> <Leader>gl :<C-u>Denite gitlog:all<CR>
    nnoremap <silent> <Leader>gs :<C-u>Denite gitstatus<CR>
    nnoremap <silent> <Leader>gc :<C-u>Denite gitbranch<CR>

# Filter and browse Z (jump around) data file
- repo: rafi/vim-denite-z
  on_source: denite.nvim
  hook_add: |
    nnoremap <silent><LocalLeader>z :<C-u>Denite z<CR>

# Browse and open sessions
- repo: rafi/vim-denite-session
  on_source: denite.nvim
  hook_add: |
    nnoremap <silent><LocalLeader>s :<C-u>Denite session -buffer-name=list<CR>

# ==========================================
# Operators
# ---------
# Define your own custom operators
- repo: kana/vim-operator-user
  lazy: 1

# Operator to replace text with register content
- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map:
    vnx: <Plug>
  hook_add: |
    map y <Plug>(operator-flashy)
    nmap Y <Plug>(operator-flashy)$

# Operator to enclose text objects
- repo: rhysd/vim-operator-surround
  depends:
    - vim-operator-user
    - vim-textobj-multiblock
  on_map:
    vnx: <Plug>
  hook_add: |
    map <silent>sa <Plug>(operator-surround-append)
    map <silent>sd <Plug>(operator-surround-delete)
    map <silent>sr <Plug>(operator-surround-replace)
    nmap <silent>saa <Plug>(operator-surround-append)<Plug>(textobj-multiblock-i)
    nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
    nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

# Highlight yanked area
- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map:
    nx: <Plug>

# ==========================================
# Text objects
# ------------
# Create your own text objects
- repo: kana/vim-textobj-user
  on_func: textobj#user#

# Handle bracket objects
- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map:
    ox: <Plug>
  hook_add: |
    let g:textobj_multiblock_no_default_key_mappings = 1
    omap <silent> ab <Plug>(textobj-multiblock-a)
    omap <silent> ib <Plug>(textobj-multiblock-i)
    xmap <silent> ab <Plug>(textobj-multiblock-a)
    xmap <silent> ib <Plug>(textobj-multiblock-i)

# Text objects for functions
- repo: kana/vim-textobj-function
  depends: vim-textobj-user
  on_map:
    ox: <Plug>
  hook_add: |
    let g:textobj_function_no_default_key_mappings = 1
    omap <silent> af <Plug>(textobj-function-a)
    omap <silent> if <Plug>(textobj-function-i)
    xmap <silent> af <Plug>(textobj-function-a)
    xmap <silent> if <Plug>(textobj-function-i)

# Visually select increasingly larger regions of text
- repo: terryma/vim-expand-region
  on_map:
    x: <Plug>
  hook_add: |
    xmap v <Plug>(expand_region_expand)
    xmap V <Plug>(expand_region_shrink)

# Match function arguments
- repo: AndrewRadev/sideways.vim
  on_map:
    ox: <Plug>Sideways
  hook_add: |
    nnoremap <silent> m" :SidewaysJumpLeft<CR>
    nnoremap <silent> m' :SidewaysJumpRight<CR>
    omap <silent> a, <Plug>SidewaysArgumentTextobjA
    xmap <silent> a, <Plug>SidewaysArgumentTextobjA
    omap <silent> i, <Plug>SidewaysArgumentTextobjI
    xmap <silent> i, <Plug>SidewaysArgumentTextobjI

# Transition code between multi-line and single-line
- repo: AndrewRadev/splitjoin.vim
  on_map:
    n: <Plug>Splitjoin
  hook_add: |
    let g:splitjoin_join_mapping = ''
    let g:splitjoin_split_mapping = ''
    nmap sj :SplitjoinJoin<CR>
    nmap sk :SplitjoinSplit<CR>

# Perform diffs on blocks of code
- repo: AndrewRadev/linediff.vim
  on_cmd: Linediff
  hook_add: |
    vnoremap ,df :Linediff<CR>
    vnoremap ,da :LinediffAdd<CR>
    nnoremap ,ds :<C-u>LinediffShow<CR>
    nnoremap ,dr :<C-u>LinediffReset<CR>

# Delete surrounding function call
- repo: AndrewRadev/dsf.vim
  on_map:
    n: <Plug>Dsf
  hook_add: |
    let g:dsf_no_mappings = 1
    nmap dsf <Plug>DsfDelete
    nmap csf <Plug>DsfChange

#  vim: set ts=2 sw=2 tw=80 et :
