{
  /*
    Built-ins
    ============
  */
  // breadcrumbs
  "breadcrumbs.enabled": true,

  // diffEditor
  "diffEditor.renderSideBySide": false,

  // debug
  "debug.allowBreakpointsEverywhere": true,

  // editor
  "editor.accessibilitySupport": "off",
  "editor.bracketPairColorization.enabled": true,
  "editor.cursorBlinking": "solid",
  "editor.cursorStyle": "line",
  "editor.cursorSurroundingLines": 999,
  "editor.fontFamily": "FiraCode Nerd Font",
  "editor.fontLigatures": true,
  "editor.fontSize": 14,
  "editor.formatOnSave": true,
  "editor.guides.indentation": false,
  "editor.glyphMargin": false,
  "editor.insertSpaces": false,
  "editor.inlineSuggest.enabled": true,
  "editor.lineHeight": 1.2,
  "editor.lineNumbers": "on",
  "editor.minimap.enabled": false,
  "editor.minimap.renderCharacters": false,
  "editor.renderLineHighlight": "none",
  "editor.renderWhitespace": "boundary",
  "editor.tabSize": 4,
  "editor.rulers": [120],
  "editor.scrollBeyondLastLine": false,
  "editor.scrollbar.verticalScrollbarSize": 8,
  "editor.showFoldingControls": "never",
  "editor.smoothScrolling": true,
  "editor.suggest.localityBonus": true,
  "editor.tokenColorCustomizations": {
    "[*Light*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#000"
          }
        }
      ]
    },
    "[*Dark*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#fff"
          }
        }
      ]
    },
    "[Nord]": {
      "comments": "#616e88"
    },
    "textMateRules": [
      {
        "scope": "keyword.other.dotenv",
        "settings": {
          "foreground": "#FF000000"
        }
      }
    ]
  },
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?",
  "editor.wordWrap": "bounded",
  "editor.wordWrapColumn": 120,

  // Do not modify my code, please:
  "editor.autoClosingBrackets": "never",
  "editor.autoClosingOvertype": "never",
  "editor.autoClosingQuotes": "never",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.acceptSuggestionOnEnter": "on",
  "editor.autoSurround": "never",
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },
  "editor.parameterHints.enabled": false,
  "editor.suggestOnTriggerCharacters": false,
  "editor.suggestSelection": "recentlyUsed",
  "editor.tabCompletion": "off",
  "emmet.showExpandedAbbreviation": "never",

  // explorer
  "explorer.autoRevealExclude": {
    "**/dist": true
  },
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,

  // extensions
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "extensions.ignoreRecommendations": true,

  // files
  "files.associations": {
    "*.mjml": "handlebars",
    ".env.local": "shellscript",
    ".env*": "dotenv",
    ".buckconfig": "toml",
    ".flowconfig": "ini",
    ".tern-project": "json",
    ".jsbeautifyrc": "json",
    ".jscsrc": "json",
    ".watchmanconfig": "json",
    "go.sum": "go",
    "Brewfile": "ruby",
    "Tmuxfile": "tmux",
    "yarn.lock": "yaml"
  },
  "files.exclude": {
    "**/.swp": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/bower_components": true,
    "**/__pycache__": true,
    "**/.cache": true,
    "**/.idea": true,
    "**/.pytest_cache": true,
    "**/.mypy_cache": true,
    "**/.venv": true,
    "**/.coverage": true,
    "**/*.py[co]": true,
    "**/htmlcoverage": true,
    "**/docs/build": true,
    "**/.next": true,
    "**/yarn.lock": true
  },
  "files.trimTrailingWhitespace": true,
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true
  },

  // git
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.decorations.enabled": true,
  "git.enableSmartCommit": true,
  "git.inputValidationSubjectLength": 50,
  "git.inputValidationLength": 72,
  "git.mergeEditor": true,
  "git.openRepositoryInParentFolders": "never",
  "git.path": "/opt/homebrew/bin/git",
  "git.useEditorAsCommitInput": false,

  // search
  "search.useGlobalIgnoreFiles": true,
  "search.useIgnoreFiles": true,

  // telemetry
  "telemetry.telemetryLevel": "off",

  // terminal
  "terminal.external.osxExec": "iTerm.app",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.defaultProfile.linux": "bash",
  "terminal.integrated.enableBell": true,
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.fontWeight": "400",
  "terminal.integrated.fontWeightBold": "normal",
  "terminal.integrated.macOptionIsMeta": true,
  "terminal.integrated.smoothScrolling": true,

  // UI
  "references.preferredLocation": "view",
  "outline.collapseItems": "alwaysCollapse",
  "update.showReleaseNotes": false,
  "window.commandCenter": true,
  "window.nativeTabs": true,

  // Workbench
  "workbench.activityBar.location": "hidden",
  "workbench.colorTheme": "Solarized Dark",
  "workbench.editor.tabActionCloseVisibility": false,
  "workbench.editor.tabSizing": "shrink",
  "workbench.iconTheme": "vscode-great-icons",
  "workbench.layoutControl.enabled": false,
  "workbench.startupEditor": "none",
  "workbench.list.smoothScrolling": true,
  // Open each file in a new tab
  "workbench.editor.enablePreview": false,
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Zen Mode
  "zenMode.centerLayout": true,
  "zenMode.fullScreen": false,
  "zenMode.hideStatusBar": false,
  "zenMode.hideLineNumbers": false,
  "zenMode.restore": true,

  /*
    Vim
    ============
  */
  "vim.argumentObjectClosingDelimiters": [")", "]", "\""],
  "vim.easymotion": true,
  "vim.easymotionDimBackground": false,
  "vim.enableNeovim": true,
  "vim.foldfix": true,
  // If false delegate configured keys to be handled by VS Code instead
  "vim.handleKeys": {
    "<C-d>": false,
    "<C-k>": false,
    "<C-s>": false,
    "<C-u>": false,
    "<C-x>": false,
    "<C-z>": false
  },
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.duration": 150,
  "vim.hlsearch": true,
  "vim.incsearch": true,
  "vim.leader": "<space>",
  "vim.shell": "/opt/homebrew/bin/bash",
  "vim.smartRelativeLine": true,
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": true,

  // Normal Mode
  "vim.normalModeKeyBindings": [
    // C for c$ (change to end of line)
    {
      "before": ["C"],
      "after": ["c", "$"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // Vertical Movement - Accelerated JK
    // https://github.com/ypresto/vscode-accelerated
    {
      "before": ["j"],
      "commands": ["accelerated.cursorDown"],
      "silent": true
    },
    {
      "before": ["k"],
      "commands": ["accelerated.cursorUp"],
      "silent": true
    },
    // L for $ (go to end of line)
    {
      "before": ["L"],
      "after": ["$"]
    },
    // H for ^ (go to beginning of line)
    {
      "before": ["H"],
      "after": ["^"]
    },
    // Y for y$ (yank till end of line)
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    // Show definition and detail about function/var
    {
      "before": ["K"],
      "commands": ["editor.action.showHover"]
    },
    // Fuzzy Search
    {
      "before": [";"],
      "commands": ["workbench.action.quickOpen"]
    },
    // Folding
    {
      "before": ["<cr>"],
      "after": ["z", "a"],
      "silent": true
    },
    // Undo / Redo
    // https://github.com/VSCodeVim/Vim/issues/2007
    {
      "before": ["u"],
      "commands": ["undo"],
      "silent": true
    },
    {
      "before": ["<c-r>"],
      "commands": ["redo"],
      "silent": true
    },
    // Editor
    // Split the current editor, vertically or horizontally respectively
    {
      "before": ["q"],
      "commands": ["workbench.action.closeActiveEditor"],
      "silent": true
    },
    {
      "before": ["s", "g"],
      "commands": ["workbench.action.splitEditor"],
      "silent": true
    },
    {
      "before": ["s", "v"],
      "commands": ["workbench.action.splitEditorOrthogonal"],
      "silent": true
    },
    // Explorer
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.view.explorer"],
      "silent": true
    },
    {
      "before": ["<leader>", "f"],
      "commands": ["revealInExplorer"]
    },
    // Nav Toggles
    {
      "before": ["<leader>", "t", "l"],
      "commands": ["workbench.action.toggleSidebarVisibility"],
      "silent": true
    },
    {
      "before": ["<leader>", "t", "r"],
      "commands": ["workbench.action.toggleAuxiliaryBar"],
      "silent": true
    },
    {
      "before": ["<leader>", "t", "b"],
      "commands": ["workbench.action.togglePanel"],
      "silent": true
    },
    // Command mode
    {
      "before": [":"],
      "commands": ["workbench.action.showCommands"],
      "silent": true
    },
    // LSP keybindings
    // Note: The gd (Go to Definition) keybinding is built-in
    {
      "before": ["g", "p", "d"],
      "commands": ["editor.action.peekDefinition"]
    },
    {
      "before": ["g", "h"],
      "commands": ["editor.action.showDefinitionPreviewHover"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      "before": ["g", "p", "i"],
      "commands": ["editor.action.peekImplementation"]
    },
    {
      "before": ["g", "q"],
      "commands": ["editor.action.quickFix"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    {
      "before": ["g", "t"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    {
      "before": ["g", "p", "t"],
      "commands": ["editor.action.peekTypeDefinition"]
    },
    // Drag selected lines up or down
    {
      "before": ["<leader>", "j"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["<leader>", "k"],
      "commands": ["editor.action.moveLinesUpAction"]
    },
    // Enter Visual Line Mode
    {
      "before": ["<leader>", "v"],
      "after": ["V"]
    }
  ],

  // Visual Mode
  "vim.visualModeKeyBindingsNonRecursive": [
    // Bind > and < in visual mode to indent/outdent lines (repeatable)
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    // Drag selected lines up or down
    {
      "before": ["<leader>", "j"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["<leader>", "k"],
      "commands": ["editor.action.moveLinesUpAction"]
    },
    // Enter Visual Line Mode
    {
      "before": ["<leader>", "v"],
      "after": ["V"]
    },
    // Reselect and re-yank any text that is pasted in visual mode.
    // https://stackoverflow.com/questions/290465/how-to-paste-over-without-overwriting-register
    {
      "before": ["p"],
      "after": ["P"]
    }
  ],

  // Vim abbreviations styles
  "auto-correct.dictionary": [
    {
      "languages": ["*"],
      "words": {
        "adn": "and",
        "afterword{,s}": "afterward{}",
        "anomol{y,ies}": "anomal{}",
        "austrail{a,an,ia,ian}": "austral{ia,ian}",
        "cal{a,e}nder{,s}": "cal{e}ndar{}",
        "{c,m}arraige{,s}": "{}arriage{}",
        "{,in}consistan{cy,cies,t,tly}": "{}consisten{}",
        "destionation{,s}": "destination{}",
        "delimeter{,s}": "delimiter{}",
        "{,non}existan{ce,t}": "{}existen{}",
        "despara{te,tely,tion}": "despera{}",
        "d{e,i}screp{e,a}nc{y,ies}": "d{i}screp{a}nc{}",
        "euphamis{m,ms,tic,tically}": "euphemis{}",
        "grpe": "grep",
        "gti": "git",
        "hense": "hence",
        "{,re}impliment{,s,ing,ed,ation}": "{}implement{}",
        "improvment{,s}": "improvement{}",
        "inherant{,ly}": "inherent{}",
        "lastest": "latest",
        "{les,compar,compari}sion{,s}": "{les,compari,compari}son{}",
        "mispell": "misspell",
        "mispelled": "misspelled",
        "{,un}nec{ce,ces,e}sar{y,ily}": "{}nec{es}sar{}",
        "{,un}orgin{,al}": "{}origin{}",
        "persistan{ce,t,tly}": "persisten{}",
        "referesh{,es}": "refresh{}",
        "rec{co,com,o}mend{,s,ed,ing,ation}": "rec{om}mend{}",
        "{,ir}releven{ce,cy,t,tly}": "{}relevan{}",
        "Req": "Request",
        "reproducable": "reproducible",
        "resouce{,s}": "resource{}",
        "restraunt{,s}": "restaurant{}",
        "seperat{e,es,ed,ing,ely,ion,ions,or}": "separat{}",
        "segument{,s,ed,ation}": "segment{}",
        "hte": "the",
        "tehn": "then",
        "waht": "what",
        "Tqbf": "The quick, brown fox jumps over the lazy dog",
        "Lidsa": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"
      },
      "useLargeList": false
    },
    {
      "languages": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact"
      ],
      "words": {
        "cosnt": "const",
        "lte": "let",
        "functoin": "function"
      }
    },
    {
      "languages": ["python"],
      "words": {
        "dfe": "def"
      }
    }
  ],

  /*
    Langs
    ============
  */
  "[css]": {
    "editor.formatOnSave": false,
    "editor.formatOnPaste": false
  },
  "[git-commit]": {
    "editor.rulers": [50, 72]
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "markdown.preview.fontSize": 16,
  "php.suggest.basic": false,

  // Python
  "notebook.codeActionsOnSave": {
    "notebook.source.fixAll": true,
    "notebook.source.organizeImports": true
  },
  "notebook.formatOnSave.enabled": true,
  "[python]": {
    "editor.tabSize": 4,
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit"
    },
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "python.analysis.typeCheckingMode": "off",
  "python.analysis.autoImportCompletions": false,
  "python.analysis.diagnosticSeverityOverrides": {
    "reportMissingImports": "none",
    "reportUnusedVariable": "none"
  },
  "python.languageServer": "Pylance",
  "python.terminal.activateEnvironment": true,

  // JS / TS
  "[javascript]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "javascript.suggest.completeJSDocs": false,
  "javascript.suggest.autoImports": false,
  "javascript.updateImportsOnFileMove.enabled": "never",

  "typescript.disableAutomaticTypeAcquisition": true,
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "typescript.preferences.jsxAttributeCompletionStyle": "none",
  "typescript.suggest.autoImports": false,
  "typescript.updateImportsOnFileMove.enabled": "never",

  /*
    Tools
    ============
  */
  // errorlens
  "errorLens.messageEnabled": true,
  "errorLens.statusBarColorsEnabled": true,
  "errorLens.statusBarMessageEnabled": false,

  // eslint
  "eslint.format.enable": true,
  "eslint.rules.customizations": [
    {
      "rule": "*",
      "severity": "warn"
    }
  ],

  // Github Copilot
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": false,
    "markdown": true
  }
}
